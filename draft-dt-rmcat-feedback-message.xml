<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<rfc category="std" docName="draft-dt-rmcat-feedback-message-01"
     ipr="trust200902">
  <front>
    <title abbrev="Congestion Control Feedback in RTCP">RTP Control Protocol
    (RTCP) Feedback for Congestion Control</title>

    <author fullname="Zaheduzzaman Sarker" initials="Z." surname="Sarker">
      <organization>Ericsson AB</organization>

      <address>
        <postal>
          <street></street>

          <city>Luleae</city>

          <region></region>

          <code></code>

          <country>Sweden</country>
        </postal>

        <phone>+46107173743</phone>

        <email>zaheduzzaman.sarker@ericsson.com</email>
      </address>
    </author>

    <author fullname="Colin Perkins" initials="C. S." surname="Perkins">
      <organization>University of Glasgow</organization>

      <address>
        <postal>
          <street>School of Computing Science</street>

          <city>Glasgow</city>

          <code>G12 8QQ</code>

          <country>United Kingdom</country>
        </postal>

        <email>csp@csperkins.org</email>
      </address>
    </author>

    <author fullname="Varun Singh" initials="V." surname="Singh">
      <organization abbrev="callstats.io">Nemu Dialogue Systems
      Oy</organization>

      <address>
        <postal>
          <street>Runeberginkatu 4c A 4</street>

          <city>Helsinki</city>

          <code>00100</code>

          <country>Finland</country>
        </postal>

        <email>varun.singh@iki.fi</email>

        <uri>http://www.callstats.io/</uri>
      </address>
    </author>

    <author fullname="Michael A. Ramalho" initials="M. A." surname="Ramalho">
      <organization abbrev="Cisco Systems">Cisco Systems, Inc.</organization>

      <address>
        <postal>
          <street>6310 Watercrest Way Unit 203</street>

          <city>Lakewood Ranch</city>

          <region>FL</region>

          <code>34202</code>

          <country>USA</country>
        </postal>

        <phone>+1 919 476 2038</phone>

        <email>mramalho@cisco.com</email>
      </address>
    </author>

    <date day="24" month="October" year="2016" />

    <area>Transport</area>

    <workgroup>IETF RMCAT Working Group</workgroup>

    <keyword>Congestion control, feedback message, RTP, RTCP</keyword>

    <abstract>
      <t>This document describes a feedback message intended to enable
      congestion control for interactive real-time traffic. The RTP Media
      Congestion Avoidance Techniques (RMCAT) Working Group formed a design
      team to analyze feedback requirements from various congestion control
      algorithms and to design a generic feedback message to help ensure
      interoperability across those algorithms. The feedback message is
      designed for a sender-based congestion control, which means the receiver
      of the media will send necessary feedback to the sender of the media to
      perform the congestion control at the sender.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>For interactive real-time traffic the typical protocol choice is
      Realtime Transport Protocol (RTP) over User Datagram Protocol (UDP). RTP
      does not provide any guarantee of Quality of Service (QoS), reliable or
      timely delivery and expects the underlying transport protocol to do so.
      UDP alone certainly does not meet that expectation. However, RTP Control
      Protocol (RTCP) provides a mechanism to periodically send transport and
      media metrics to the media sender which can be utilized and extended for
      the purposes of RMCAT congestion control. For a congestion control
      algorithm which operates at the media sender, RTCP messages can be
      transmitted from the media receiver back to the media sender to enable
      congestion control. In the absence of standardized messages for this
      purpose, the congestion control algorithm designers have designed
      proprietary RTCP messages that convey only those parameters required for
      their respective designs. As a direct result, the different congestion
      control (a.k.a. rate adaptation) designs are not interoperable. To
      enable algorithm evolution as well as interoperability across designs
      (e.g., different rate adaptation algorithms), it is highly desirable to
      have generic congestion control feedback format.</t>

      <t>To help achieve interoperability for unicast RTP congestion control,
      this memo proposes a common RTCP feedback format that can be used by
      NADA <xref target="I-D.ietf-rmcat-nada"></xref>, SCReAM <xref
      target="I-D.ietf-rmcat-scream-cc"></xref>, Google Congestion Control
      <xref target="I-D.ietf-rmcat-gcc"></xref> and Shared Bottleneck
      Detection <xref target="I-D.ietf-rmcat-sbd"></xref>, and hopefully
      future RTP congestion control algorithms as well.</t>

      <t>[Editor's Note: consider removing this part of the section in the
      later versions ] In preparing this memo, we have considered the
      following: <list style="symbols">
          <t>What are the feedback requirements for the proposed RTP
          congestion control candidate solution?</t>

          <t>Can we design a feedback message that is future proof, and
          general enough to meet the needs of algorithms that have yet to be
          defined?</t>

          <t>Can we use existing RTCP Extended Report (XR) blocks and/or RTCP
          Feedback Messages? If not, what is the rationale behind new XR
          blocks and/or RTCP feedback messages?</t>

          <t>What will be the wire format of the generic feedback message?</t>
        </list></t>
    </section>

    <section title="Terminology">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119"></xref>.</t>

      <t>In addition the terminology defined in <xref
      target="RFC3550"></xref>, <xref target="RFC3551"></xref>, <xref
      target="RFC3611"></xref>, <xref target="RFC4585"></xref>, and <xref
      target="RFC5506"></xref> applies.</t>
    </section>

    <section anchor="feedback_message" title="Feedback Message">
      <t>The design team analyzed the feedback requirements from the different
      proposed candidate in RMCAT WG. The analysis showed some commonalities
      between the proposed solution candidate and some can be derived from
      other information. The design team has agreed to have following packet
      information block in the feedback message to satisfy different
      requirement analyzed.</t>

      <t><list style="symbols">
          <t>Packet Identifier : RTP sequence number. The RTP packet header
          includes an incremental packet sequence number that the sender needs
          to correlate packets sent at the sender with packets received at the
          receiver.</t>

          <t>Packet Arrival Time : Arrival time stamp at the receiver of the
          media. The sender requires the arrival time stamp of the respective
          packet to determine delay and jitter the packet had experienced
          during transmission. In a sender based congestion control solution
          the sender requires to keep track of the sent packets - usually
          packet sequence number, packet size and packet send time. With the
          packet arrival time the sender can detect the delay and jitter
          information. Along with packet loss and delay information the sender
          can estimate the available bandwidth and thus adapt to the
          situation.</t>

          <t>Packet Explicit Congestion Notification (ECN) Marking : If ECN
          <xref target="RFC3168"></xref> is used, it is necessary to report on
          the 2-bit ECN mark in received packets, indicating for each packet
          whether it is marked not-ECT, ECT(0), ECT(1), or ECN-CE. If the path
          on which the media traffic traversing is ECN capable then the sender
          can use the Congestion Experienced (ECN-CE) marking information for
          congestion control. It is important that the receiver sends the
          ECN-CE marking information of the packet back to the sender to take
          the advantages of ECN marking. Note that how the receiver gets the
          ECN marking information at application layer is out of the scope of
          this design team. Additional information for ECN use with RTP can be
          found at <xref target="RFC6679"></xref>.</t>
        </list></t>

      <t>The feedback messages can have one or more of the above information
      blocks. For RTCP based feedback message the packet information block
      will be grouped by Synchronization Source (SSRC) identifier.</t>

      <t>As a practical matter, we note that host Operating System (OS)
      process interruptions can occur at inopportune times. Thus, the
      recording of the sent times at the sender and arrival times at the
      receiver should be made with deliberate care. This is because the time
      duration of host OS interruptions can be significant relative to the
      precision desired in the one-way delay estimates. Specifically, the send
      time should be recorded at the latest opportunity prior to outputting
      the media packet at the sender (e.g., socket or RTP API) and the arrival
      time at the receiver (e.g., socket or RTP API) should be recorded at the
      earliest opportunity available to the receiver.</t>

      <section anchor="sec:xr"
               title="RTCP XR Block for Reporting Congestion Control Feedback">
        <t>Congestion control feedback can be sent as part of a scheduled RTCP
        report, or as RTP/AVPF early feedback. If sent as part of a scheduled
        RTCP report, the feedback is sent as an XR block, as part of a regular
        compound RTCP packet. The format of the RTCP XR report block is as
        follows (this will be preceded in the compound RTCP packet by an RTCP
        XR header, described in <xref target="RFC3611"></xref>, that includes
        the SSRC of the report sender):</t>

        <t><figure>
            <artwork><![CDATA[
     0                   1                   2                   3
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |    BT=RC2F    | Report count  |      Block Length = TBD       |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                     Report Timestamp (RTS)                    |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-------
    |               SSRC of 1st media source (SSRC_1)               |      S
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+      S
    |         begin_seq_1           |E|ECN|    end_seq_delta_1      |      R
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ---  C
    |            ATO_1_1            |            ATO_1_2            |   |  .
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  K1  1
    |            ATO_1_3            | ... (zero padding as nessary) |   |  |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ---  |
    |C11|C12|C13| ...                 ... (zero padding as nessary) |  K2  |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ------
    .                                                               .
    .                                                               .
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-------
    |               SSRC of Nth media source (SSRC_N)               |      S
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+      S
    |         begin_seq_N           |E|ECN|    end_seq_delta_N      |      R
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+      C
    |            ATO_N_1            | ...                           |      .
    .                                                               .      N
    .                                                               .      |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-------
]]></artwork>
          </figure></t>

	<t>The XR Congestion Control feedback report block uses the same
        beginning format as specified for the loss and duplicate report blocks in
	<xref target="RFC3611"></xref>. The parameters "block length", "begin_seq",
	and "end_seq" used in the text below have the same semantics and
	representation as defined in <xref target="RFC3611"></xref>.</t>

        <t>All timestamps are derived from the same wall-clock using guidance
	provided in <xref target="feedback_message"></xref>. The timestamp
	units are in 0.1 millisecond increments unless specified otherwise via
       	session negotiation [Editor's note: Perhaps Colin has better words for
	RTCP option specification and negotiation.] </t>

        <t>Block Type field (BT, 8 bits): The RMCAT congestion control feedback
        Report Block is identified by the constant RC2F. [Note to RFC Editor:
        Please replace RC2F with the IANA provided RTCP XR block type for this
        block.]</t>

        <t>Report Count field (RC, 8 bits): This field describes the number of SSRCs reported
	by this report. The number should at least be 1.</t>

        <t>Report Timestamp Field (RTS, 32 bits): This timestamp represents when this
	report was generated and uses the same wall-clock that is used
	for all the receive timestamps arrivals in this report. As all other
	timestamps in the report will be formulated as time offsets
	from this time, the report timestamp here must be equal to or later
	than that associated with the most recently received packet in this
	report. However, unlike the
	desired care in send timestamping of sent packets (not described in
	this RFC), this report timestamp need not be as accurate as possible
	relative to the actual time the report is sent. That is, the RTS should
	not be relied upon as the actual send time for this report by any
	entity receiving the report. The primary utility of this timestamp
	is to provide an anchor for the arrival times of the packets
	contained in this report.</t>

	<t>All the remaining fields described below appear in each individual
	SSRC report block. The figure above depicts the case for N such SSRC
	source blocks (i.e., RC = N). All fields are denoted by a SSRC source
	block index i (also shown in figure where space allows). The
	index for an individual packet data within a SSRC sub block is
	denoted by the index j.</t>

	<t>E field (E_i, 1 bit): This bit set to 1 whenever the ECN bits of all
	received packets in between begin_seq and end_seq, inclusive, for this
	SSRC were received with the identically same ECN bit values. This E field
	bit is set to 0 when this is not true. When 1, the value of ECN bits is
	reported in the immediately following ECN field. When 0, the ECN bits
	for every received packet in between begin_seq and end_seq, inclusive,
	are reported in a separate C block (described below)</t>
	
	<t>ECN field (ECN_i, 2 bits): When the E field is one, these bits are to be
	set to the ECN bits found in all recieved packts. When the E field is
	zero, these bits should be set to a value representative of
	those in the received packets (such as the most prevalent value).
	</t>
	
	<t>end_seq_delta field (end_seq_delta_i, 13 bits): This is derived from
	end_seq (the ending sequence number for SSRC source block i).
	This value shall be the lower order thirteen bits resulting from the following
	operation performed in 16 bit or greater unsigned precision: the modulo 2^16
	subtraction of begin_seq from end_seq (both 16-bit unsigned quantities
	as per <xref target="RFC3611"></xref>). We note that the number of
	packets to be reported for this SSRC will be one more than
	end_seq_delta and that at most 8192 ((2^13-1)+1) packets (per SSRC)
	can be reported using this format. A entity receiving this report
	may thus re-create the end_seq for SSRC i via the modulo2^16 addition
	of begin_seq and end_seq_delta. </t>

        <t>Each sequence number between begin_seq and end_seq, inclusive,
	is represented by an individual 16-bit arrival time offset (ATO) block.
	The ATO blocks (specified below) are simply concatenated together.
	When the ECN bits of received packets are not all identical, they
	will be reported in 2-bit C blocks (specified below) which are
	similarly concatenated together. The number of ATO blocks and the
	number of C blocks (when required) is equal to the number of packets
	reported for this SSRC (i.e., end_seq_delta_i+1 for SSRC source
	block i).</t>

	<t>Arrival Time Offset field (ATO_i_j, 16 bits): This value is the arrival
	time of the RTP packet at the receiver relative to the report timestamp
	(RTS) for packet j in SSRC i. In the case of duplicate packet arrivals
	for the seq_no being reported, the arrival time should be that
	of the first packet received. If the packet number for the seq_no
	being reported was not received, this field is set to 0xFFFF
	(2^16-1). Otherwise, it is reported as a positive quantity - and in
	the same timestamp units as the RTS - by the modulo 2^16 subtraction
	of the reception timestamp from the RTS, with the following exception.
	If the result of this subtraction is greater than 2^16-3 (i.e., > 0xFFFD),
	then the value 0xFFFE shall be entered to indicate a time difference
	of greater than 2^16-3 in timestamp units. This allows packets sent
	up to 6.5532 seconds before the RTO timestamp to be reported assuming the
	default 0.1 millisecond timestamp is employed.
	As it is desired to 32-bit align all the ATO blocks, unused bits
	(if any) in the last 32-bit word shall be zero padded. Thus the number
	of 32-bit words for the ATO field is (end_seq_delta+1)/2
	whenever (end_seq_delta+1)/2 is an integer and
        ceil((end_seq_delta+1)/2) when it is not.  The number of
	32-bit words used in the ATO portion of this report for the first
	SSRC is depicted as K1 in the figure above.</t>	

	<t>C field (C_i_j, 2 bits): These fields are required whenever the E
	field is set to zero (indicating that not all the received packets had
	the same ECN bit values). The C_i_j fields are simply concatenated for
	all sequence numbers between begin_seq and end_seq, inclusive. If the packet
	corresponding to that sequence number was received (ATO value not 0xFFFF),
	the two bits shall be set to the ECN bits for that packet.
	If the packet corresponding to that sequence number was not received,
	the value reported in the C_i field for this packet is meaningless, may
	be set to any value (0x00 suggested), and should not be saved/recorded
	or otherwise interpreted as meaningful by a recipient of this report.
	As it is desired to 32-bit align all the C_i blocks, unused
	bits (if any) in the last 32-bit word shall be zero padded. Thus the number
	of 32-bit words for the C_i field is (end_seq_delta+1)/16 whenever
	(end_seq_delta+1)/16 is an integer and ceil((end_seq_delta+1)/16) when
	it is not.  The number of 32-bit words used in the C_i portion of this
	report for the first SSRC is depicted as K2 above.</t>

	<t>[TODO: Need to agree upon, then document, the compressed version of
	the above. Could steal one more bit from end_seq_delta
	field or specify a different RTCP XR block type.]</t>
	
      </section>

      <section anchor="sec:avpf"
               title="RTP/AVPF Transport Layer Feedback for Congestion Control">
        <t>Congestion control feedback can also be sent in a non-compound RTCP
        packet <xref target="RFC5506"></xref> if the RTP/AVPF profile <xref
        target="RFC4585"></xref> or the RTP/SAVPF profile <xref
        target="RFC5124"></xref> is used. In this case, the congestion control
        feedback is sent as a Transport Layer FB message (RTCP packet type
        205), with FMT=2 (congestion control feedback). The format of this
        RTCP packet is as follows:</t>

        <t><figure>
            <artwork><![CDATA[
     0                   1                   2                   3
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |V=2|P| FMT = 2 |    PT = 205   |          length               |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                    SSRC of packet sender                      |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-------
    |               SSRC of 1st media source (SSRC_1)               |      S
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+      S
    |         begin_seq_1           |E|ECN|    end_seq_delta_1      |      R
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ---  C
    |            ATO_1_1            |            ATO_1_2            |   |  .
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  K1  1
    |            ATO_1_3            | ... (zero padding as nessary) |   |  |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ---  |
    |C11|C12|C13| ...                 ... (zero padding as nessary) |  K2  |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ------
    .                                                               .
    .                                                               .
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-------
    |               SSRC of Nth media source (SSRC_N)               |      S
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+      S
    |         begin_seq_N           |E|ECN|    end_seq_delta_N      |      R
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+      C
    |            ATO_N_1            | ...                           |      .
    .                                                               .      N
    .                                                               .      |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-------
    |                     Report Timestamp (RTS)                    |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork>
          </figure></t>

        <t>The first 8 octets are the RTCP header, with PT=205 and FMT=2
        specifying the remainder is a congestion control feedback packet, and
        including the SSRC of the packet sender.</t>

        <t>Section 6.1 of <xref target="RFC4585"></xref> requires that
	the first 8 octets are immediately followed by the SSRC of the media
	source being reported upon. Accordingly, the format of this
	report is modified from that of the RTCP XR report block, by
	moving the report timestamp to the end. The meaning of all the
	fields beyond the first 8 octets is as described
	in <xref target="sec:xr"></xref>.</t>
      </section>
    </section>

    <section title="Feedback Frequency and Overhead">
      <t>There is a trade-off between speed and accuracy of reporting, and the
      overhead of the reports. <xref
      target="I-D.ietf-rmcat-rtp-cc-feedback"></xref> discusses this
      trade-off, and the possible rates of feedback.</t>

      <t>It is a general understanding that the congestion control algorithms
      will work better with more frequent feedback - per packet feedback.
      However, RTCP bandwidth and transmission rules put some upper limits on
      how frequently the RTCP feedback messages can be send from the media
      receiver to the media sender. It has been shown <xref
      target="I-D.ietf-rmcat-rtp-cc-feedback"></xref> that in most cases a per
      frame feedback is a reasonable assumption on how frequent the RTCP
      feedback messages can be transmitted. The design team also have noted
      that even if a higher frequency of feedback is desired it is not viable
      if the feedback messages starts to compete against the media traffic on
      the feedback path during congestion period. Analyzing the feedback
      interval requirement <xref target="feedback-requirements"></xref> it can
      be seen that the candidate algorithms can perform with a feedback
      interval range of 50-200ms. A value within this range need to be
      negotiated at session setup.</t>
    </section>

    <section title="Design Rationale">
      <t>The primary function of RTCP Sender Report (SR) / Receiver Report
      (RR) is to report the reception quality of media. The regular SR / RR
      reports contain information about observed jitter, fractional packet
      loss and cumulative packet loss. The original intent of this information
      was to assist flow and congestion control mechanisms. Even though it is
      possible to do congestion control based on information provided in the
      SR/RR reports it is not sufficient to design an efficient congestion
      control algorithm for interactive real-time communication. An efficient
      congestion control algorithm requires more fine grain information on per
      packet (see <xref target="feedback_message"></xref>) to react to the
      congestion or to avoid funder congestion on the path.</t>

      <t>Codec Control Message for AVPF <xref target="RFC5104"></xref> defines
      Temporary Maximum Media Bit Rate (TMMBR) message which conveys a
      temporary maximum bitrate limitation from the receiver of the media to
      the sender of the media. Even though it is not designed to replace
      congestion control, TMMBR has been used as a means to do receiver based
      congestion control where the session bandwidth is high enough to send
      frequent TMMBR messages especially with reduced sized reports <xref
      target="RFC5506"></xref>. This requires the receiver of the media to
      analyze the data reception, detect congestion level and recommend a
      maximum bitrate suitable for current available bandwidth on the path
      with an assumption that the sender of the media always honors the TMMBR
      message. This requirement is completely opposite of the sender based
      congestion control approach. Hence, TMMBR cannot be as a signaling means
      for a sender based congestion control mechanism. However, TMMBR should
      be viewed a complimentary signaling mechanism to establish receiver's
      current view of acceptable maximum bitrate which a sender based
      congestion control should honor.</t>

      <t>There are number of RTCP eXtended Report (XR) blocks have been
      defined for reporting of delay, loss and ECN marking. It is possible to
      combine several XR blocks to report the loss and ECN marking at the cost
      of overhead and complexity. However, there is no existing RTCP XR block
      to report packet arrival time.</t>

      <t>Considering the issues discussed here it is rational to design a new
      congestion control feedback signaling mechanism for sender based
      congestion control algorithm.</t>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>This document is an outcome of RMCAT design team discussion. We would
      like to thank all participants specially Xiaoquing Zhu, Stefan Holmer,
      David, Ingemar Johansson and Randell Jesup for their valuable
      contribution to the discussions and to the document.</t>
    </section>

    <!-- Possibly a 'Contributors' section ... -->

    <section anchor="IANA" title="IANA Considerations">
      <t></t>

      <section title="RTP/AVPF Transport Layer Feedback Message ">
        <t>TBD</t>
      </section>

      <section title="RTCP XR Report Blocks">
        <t>TBD</t>
      </section>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>There is a risk of causing congestion if an on-path attacker modifies
      the feedback messages in such a manner to make available bandwidth
      greater than it is in reality. [More on security consideration TBD.]</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='reference.RFC.2119'?>

      <?rfc include='reference.RFC.3550'?>

      <?rfc include='reference.RFC.3551'?>

      <?rfc include='reference.RFC.3611'?>

      <?rfc include='reference.RFC.4585'?>

      <?rfc include='reference.RFC.5124'?>

      <?rfc include='reference.RFC.5506'?>

      <?rfc include='reference.RFC.3168'?>

      <?rfc include='reference.RFC.6679'?>

      <?rfc include='reference.I-D.ietf-rmcat-rtp-cc-feedback'?>
    </references>

    <references title="Informative References">
      <?rfc include='reference.I-D.ietf-rmcat-nada'?>

      <?rfc include="reference.I-D.ietf-rmcat-scream-cc"?>

      <?rfc include="reference.I-D.ietf-rmcat-gcc"?>

      <?rfc include="reference.I-D.ietf-rmcat-sbd"?>

      <?rfc include='reference.RFC.5104'?>

      <reference anchor="feedback-requirements"
                 target="://www.ietf.org/proceedings/95/slides/slides-95-rmcat-1.pdf">
        <front>
          <title>RMCAT Feedback Requirements</title>

          <author>
            <organization></organization>
          </author>

          <date />
        </front>
      </reference>
    </references>
  </back>
</rfc>

